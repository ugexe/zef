=pod

=encoding utf8

=head2 *~*~* The Struggle *~*~*~*

Precompilation is still broken in rakudo, and this is the #1 stopper. For certain reasons I cannot release an unpolished end result (where unpolished is not defined entirely by me).

The good news is development has been moving along all the same. Some features the *in-house* copy of Zef currently implements:

=over 4
    
=item * Supports the original p6c ecosystem

=item * Supports enough of the metacpan API to download a distribution's metacpan meta data *or* the entire distribution itself

=item * Transparently use both of the above 2 `ContentStorages` (or any others provided by a plugin) for cross-storage dependency/identity searching

=item * Supports .zip/.tar.gz/.git via shell wrappers (i.e. does not require `git`)

=item * Supports wget/curl/PowerShell.WebRequest via shell wrappers (no bootstraping/dependencies required; proxy support out of the box)

=item * Don't want to use the (safe) shell wrappers? Plugins for any phase are easy to write, and easily fallback to alternatives (so you can provide OS specific implementations for instance)

=item * A detailed configuration file format that lets you control which plugins to use and fallback to

=item * Version comparisons

=back

It was hoped this could be released in good faith to the public on December 25th 2015. Unfortunately new things are still being "broken" as of today (December 24th) in addition to the previously mentioned CompUnit problems. If these are fixed by the official release of Perl6 i'm happy to say you can expect the new Zef release shortly after... but i'm not holding my breath. In the mean time it is an implied spec that you can torture the perl6 implementors (#perl6). Yes, I am slightly frustrated.

=head2 Name

Zef - Perl6 Module Management

=for HTML <a href="https://travis-ci.org/ugexe/zef"><img src="https://travis-ci.org/ugexe/zef.svg?branch=master"></a>

=head1 INSTALLATION

=head4 Manual

    git clone https://github.com/ugexe/zef.git
    cd zef
    perl6 -Ilib bin/zef install .

Be sure your `PATH` includes the path to perl6 scripts:

    $ perl6 -e "say %*CUSTOM_LIB<site>.IO.child('bin').Str"
    /home/perl6/install/share/perl6/site/bin

=head4 Rakudobrew

To install it via rakudobrew, please use the following command:

    $ rakudobrew build-zef

=head4 Manual on Windows

    git clone https://github.com/ugexe/zef.git %USERPROFILE%\zef
    cd /D %USERPROFILE%\zef
    perl6 -Ilib bin\zef install .

=head2 Notice

Rakudo does not currently load any precompiled module code, so the --no-build option is defaulted to True

=head1 USAGE

    # get that fresh package index update
    zef update

    # duh
    zef install CSV::Parser

    # noooooo!
    zef uninstall CSV::Parser

    # fire off test reports this time *onomatopoeia of an uzi*
    zef --report install CSV::Parser

    # search for module names matching `CSV::Parser`
    zef search CSV::Parser

    # META information about `CSV::Parser`
    zef info CSV::Parser

    # build project in current directory
    zef build

    # test project in current directory    
    zef test

    # fetch a specific module only
    zef get CSV::Parser

    # fetch a specific module, and shell into the directory it is saved to
    zef look CSV::Parser

    # build/test/install all modules in the ecosystem
    zef --report smoke

=head2 More CLI

=head4 B<install>

Fetch, build, test, optional report, and install.

    # verbose output
    -v

    # update the package list first
    --update

    # send a test report
    --report

    # parallel testing and precompilation (max processes/threads)
    --jobs=2

    # cut off lines that reach (our guess at) the term width in columns
    --no-wrap

    # no status bar or other CLI eye candy
    --boring

    # do everything except the actuall install
    --dry

    # include library paths to the spawned processes
    # zef -v -lib=lib-old --lib=blib-old/lib build
    #  -> perl6 -Ilib-old -Iblib-old/lib <compiler/test commands>
    --lib

    # run the tests in a random order instead of sorted
    --shuffle

    # skip modules with matching names (or any modules depending on them)
    --ignore=Acme::Virus --ignore=Acme::TakesForever

    # sets Zef::Authority.projects based on supplied file instead of downloading
    --projects-file=projects.json

    # install the requested modules regardless of currently installed versions
    # (does not affect dependencies)
    --force

    # skip testing
    --no-test

    # skip precompilation
    --no-build

    # livin that multi thread life
    zef -v --report --jobs=4 install HTTP::Server::Threaded
    
B<Example>: (note parallelized output format will be improved)

    $ zef -v --jobs=2 install CSV::Parser
    Initializing
    ===> Module count: 364
    ===> Filtered module count: 364
    ===> Package file: /tmp/p6c-packages.1441864140.72.json
    ===> Attempting to update via `git pull`
    ===> Fetching [done]
    ===> Fetching OK for: CSV::Parser
    ===> META.info availability OK for: CSV::Parser
    Parser.pm # perl6 -Iblib/lib -Ilib --target=mbc --output=blib/lib/CSV/Parser.pm.moarvm lib/CSV/Parser.pm
    ===> Precompiling [done]
    ===> Precompiling OK for: Parser.pm
    01_multiline_csv.t  # perl6 --ll-exception -Iblib/lib -Ilib t/01_multiline_csv.t
    02_escaped_csv.t    # perl6 --ll-exception -Iblib/lib -Ilib t/02_escaped_csv.t
    01_multiline_csv.t  # 1..1
    01_multiline_csv.t  # ok 1 -
    03_delimiters_csv.t # perl6 --ll-exception -Iblib/lib -Ilib t/03_delimiters_csv.t
    02_escaped_csv.t    # 1..1
    02_escaped_csv.t    # ok 1 -
    04_binary_csv.t     # perl6 --ll-exception -Iblib/lib -Ilib t/04_binary_csv.t
    03_delimiters_csv.t # 1..1
    03_delimiters_csv.t # ok 1 -
    04_binary_csv.t     # 1..1
    04_binary_csv.t     # ok 1 -
    ===> Testing [done]
    ===> Testing OK for: 01_multiline_csv.t 02_escaped_csv.t 03_delimiters_csv.t 04_binary_csv.t
    ===> Installing [done]
    ===> Install OK for: CSV::Parser

=head4 B<smoke>

Tests every module in the ecosystem, ignoring any modules with a name (or dependency name) matching argument C<*@ignores>

    snoop@cali:~/ zef --report smoke

    # skip modules with matching names (or any modules depending on them)
    --ignore=Acme::Virus --ignore=Acme::TakesForever

    # same as install options
    --boring
    --smoke
    --dry
    -v

=head4 B<search>

Take C<*%args> filters. That is, any C<--[field]="term"> passed will search for "term" in it's META [field].

Add a C<*> to any filter to have the filter apply a C<.starts-with()> filter using the string to the left of the C<*>.

Note: C<*> behaves slightly differently for C<--version>

    # search by name
    zef search Text::Table::Simple            # or zef --name="Text::Table::Simple"

    # search by version
    zef --version="*" search                  # Version filter only
    zef --version="*" search HTTP::Server     # Can search for 'whatevers'
    zef --version="0.1" search HTTP::Server   # Version matching
    zef --version="0.1+" search HTTP::Server  # Basic version ranges

    # search by other fields in META
    zef --depends="HTTP::Server" search       # Match `HTTP::Server` inside --`depends`

    # a naive substring search using a wildcard
    zef --depends="HTTP*" search              # Matches anything that $results.starts-with("HTTP")

    # sure
    zef --depends="HTTP::Server" --version="0.1+" search HTTP::Server::Threaded

B<Example>:

    $ zef -v search HTTP*
    ===> Querying Server [done]
    ===> Filtering Results [done]
    ===> Found 13 results
    ---------------------------------------------------------------------------------------------------------------------------------
    ID | Package                                      | Version | Description
    ---------------------------------------------------------------------------------------------------------------------------------
    1  | HTTP::Server::Simple                         | *       | Simple webserver module, with PSGI support
    2  | HTTP::UserAgent                              | 1.1.3   | Web user agent
    3  | HTTP::Easy                                   | *       | HTTP servers made easy, including PSGI
    4  | HTTP::Status                                 | *       | Get the text message associated with an HTTP status code
    5  | HTTP::Client                                 | *       | A flexible HTTP Client library
    6  | HTTP::ParseParams                            | 1.0.0   | cookie/query/post data parsing
    7  | HTTP::Server::Async                          | 0.1.0   | Asynchronous Base HTTP Server
    8  | HTTP::Server::Async::Plugins::Router::Simple | 0.1.0   | Basic routing for http server
    9  | HTTP::Server::Threaded                       | 0.1.0   | Threaded Base HTTP Server
    10 | HTTP::Server::Router                         | 0.1.0   | Router for HTTP::Server based servers
    11 | HTTP::Server                                 | 0.1     | role for HTTP::Server so we can have start building out some ser...
    12 | HTTP::Server::Logger                         | 0.1     | A common log format logger for anything abiding by HTTP::Server
    13 | HTTP::Headers                                | 0.1     | Tools for working with HTTP message headers
    ---------------------------------------------------------------------------------------------------------------------------------

=head4 B<info>

Given C<*@modules> it will list a formatted version of each's C<META.info> data.

Given C<-v> it will list the C<provides> as well as all dependencies, with those listed directly in C<META.info> marked with C<*>.

    zef -v info Task::Star

B<Example>:

    $ zef -v info HTTP::UserAgent
    ===> Querying Server [done]
    ===> Filtering Results [done]
    ===> Found 1 results
    [HTTP::UserAgent]
    # Version: 1.1.3
    # Author:        github:sergot
    # Description:   Web user agent
    # Source-url:    git://github.com/sergot/http-useragent.git
    # Provides: 9 items
    #       HTTP::Cookies
    #       HTTP::Message
    #       HTTP::UserAgent::Common
    #       HTTP::Header::Field
    #       HTTP::Request
    #       HTTP::Header
    #       HTTP::Cookie
    #       HTTP::Response
    #       HTTP::UserAgent
    # Depends: 7 items
    #    0.0) File::Directory::Tree
    #  * 0.1) MIME::Base64
    #  * 0.2) Encode
    #  * 0.3) URI
    #  * 0.4) DateTime::Parse
    #  * 0.5) HTTP::Status
    #  * 0.6) IO::Capture::Simple
    #  * 1.0) File::Temp
    #    2.0) HTTP::UserAgent
    
=head1 FAQ

=head3 Why does it test with --ll-exception??

Due to a bug in L<Test.pm|https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm> related to automatically setting the plan count and the END cleanup phaser the only way to get a proper exit code at the moment requires using the I<--ll-exception> flag.

    perl6 -e "use Test; use aeflkaje;" && echo "OK"
    perl6 --ll-exception -e "use Test; use aeflkaje;" && echo "OK"

=head3 Segmentation fault!

Use the C<--boring> option. This works around a bug that appears to be caused by rakudo's threads.

=head3 Slowww

Core module C<CompUnitRepo::Local::Installation> slows down rakudo with each module installed.
This should be rectified in rakudo itself soon.

=head1 NOTES

=head2 Links

L<Zef.pm|https://zef.pm/>

L<http://modules.perl6.org/>

=cut
